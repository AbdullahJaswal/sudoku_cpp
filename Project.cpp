#include <iostream>
#include <string>
#include <time.h>
#include <cmath>
#include <cstdlib>
#include <fstream>

using namespace std;

void check(int& c, int const count, int b1[], int b2[], int b3[], int b4[], int b5[], int b6[], int b7[], int b8[], int b9[])
{
    if (count == 2 && b2[0] != b1[0] && b2[0] != b1[1] && b2[0] != b1[2] && b2[1] != b1[0] && b2[1] != b1[1] && b2[1] != b1[2] && b2[2] != b1[0] && b2[2] != b1[1] && b2[2] != b1[2]
        && b2[3] != b1[3] && b2[3] != b1[4] && b2[3] != b1[5] && b2[4] != b1[3] && b2[4] != b1[4] && b2[4] != b1[5] && b2[5] != b1[3] && b2[5] != b1[4] && b2[5] != b1[5]
        && b2[6] != b1[6] && b2[6] != b1[7] && b2[6] != b1[8] && b2[7] != b1[6] && b2[7] != b1[7] && b2[7] != b1[8] && b2[8] != b1[6] && b2[8] != b1[7] && b2[8] != b1[8])
    {
        c = 1;
    }
    else if (count == 3 && b3[0] != b1[0] && b3[0] != b1[1] && b3[0] != b1[2] && b3[1] != b1[0] && b3[1] != b1[1] && b3[1] != b1[2] && b3[2] != b1[0] && b3[2] != b1[1] && b3[2] != b1[2]
             && b3[0] != b2[0] && b3[0] != b2[1] && b3[0] != b2[2] && b3[1] != b2[0] && b3[1] != b2[1] && b3[1] != b2[2] && b3[2] != b2[0] && b3[2] != b2[1] && b3[2] != b2[2]
             && b3[3] != b1[3] && b3[3] != b1[4] && b3[3] != b1[5] && b3[4] != b1[3] && b3[4] != b1[4] && b3[4] != b1[5] && b3[5] != b1[3] && b3[5] != b1[4] && b3[5] != b1[5]
             && b3[3] != b2[3] && b3[3] != b2[4] && b3[3] != b2[5] && b3[4] != b2[3] && b3[4] != b2[4] && b3[4] != b2[5] && b3[5] != b2[3] && b3[5] != b2[4] && b3[5] != b2[5]
             && b3[6] != b1[6] && b3[6] != b1[7] && b3[6] != b1[8] && b3[7] != b1[6] && b3[7] != b1[7] && b3[7] != b1[8] && b3[8] != b1[6] && b3[8] != b1[7] && b3[8] != b1[8]
             && b3[6] != b2[6] && b3[6] != b2[7] && b3[6] != b2[8] && b3[7] != b2[6] && b3[7] != b2[7] && b3[7] != b2[8] && b3[8] != b2[6] && b3[8] != b2[7] && b3[8] != b2[8])
    {
        c = 1;
    }
    else if (count == 4 && b4[0] != b1[0] && b4[0] != b1[3] && b4[0] != b1[6] && b4[3] != b1[0] && b4[3] != b1[3] && b4[3] != b1[6] && b4[6] != b1[0] && b4[6] != b1[3] && b4[6] != b1[6]
             && b4[1] != b1[1] && b4[1] != b1[4] && b4[1] != b1[7] && b4[4] != b1[1] && b4[4] != b1[4] && b4[4] != b1[7] && b4[7] != b1[1] && b4[7] != b1[4] && b4[7] != b1[7]
             && b4[2] != b1[2] && b4[2] != b1[5] && b4[2] != b1[8] && b4[5] != b1[2] && b4[5] != b1[5] && b4[5] != b1[8] && b4[8] != b1[2] && b4[8] != b1[5] && b4[8] != b1[8])
    {
        c = 1;
    }
    else if (count == 5 && b5[0] != b2[0] && b5[0] != b2[3] && b5[0] != b2[6] && b5[3] != b2[0] && b5[3] != b2[3] && b5[3] != b2[6] && b5[6] != b2[0] && b5[6] != b2[3] && b5[6] != b2[6]
             && b5[1] != b2[1] && b5[1] != b2[4] && b5[1] != b2[7] && b5[4] != b2[1] && b5[4] != b2[4] && b5[4] != b2[7] && b5[7] != b2[1] && b5[7] != b2[4] && b5[7] != b2[7]
             && b5[2] != b2[2] && b5[2] != b2[5] && b5[2] != b2[8] && b5[5] != b2[2] && b5[5] != b2[5] && b5[5] != b2[8] && b5[8] != b2[2] && b5[8] != b2[5] && b5[8] != b2[8]
             && b5[0] != b4[0] && b5[0] != b4[1] && b5[0] != b4[2] && b5[1] != b4[0] && b5[1] != b4[1] && b5[1] != b4[2] && b5[2] != b4[0] && b5[2] != b4[1] && b5[2] != b4[2]
             && b5[3] != b4[3] && b5[3] != b4[4] && b5[3] != b4[5] && b5[4] != b4[3] && b5[4] != b4[4] && b5[4] != b4[5] && b5[5] != b4[3] && b5[5] != b4[4] && b5[5] != b4[5]
             && b5[6] != b4[6] && b5[6] != b4[7] && b5[6] != b4[8] && b5[7] != b4[6] && b5[7] != b4[7] && b5[7] != b4[8] && b5[8] != b4[6] && b5[8] != b4[7] && b5[8] != b4[8])
    {
        c = 1;
    }
    else if (count == 6 && b6[0] != b3[0] && b6[0] != b3[3] && b6[0] != b3[6] && b6[3] != b3[0] && b6[3] != b3[3] && b6[3] != b3[6] && b6[6] != b3[0] && b6[6] != b3[3] && b6[6] != b3[6]
             && b6[1] != b3[1] && b6[1] != b3[4] && b6[1] != b3[7] && b6[4] != b3[1] && b6[4] != b3[4] && b6[4] != b3[7] && b6[7] != b3[1] && b6[7] != b3[4] && b6[7] != b3[7]
             && b6[2] != b3[2] && b6[2] != b3[5] && b6[2] != b3[8] && b6[5] != b3[2] && b6[5] != b3[5] && b6[5] != b3[8] && b6[8] != b3[2] && b6[8] != b3[5] && b6[8] != b3[8]
             && b6[0] != b4[0] && b6[0] != b4[1] && b6[0] != b4[2] && b6[1] != b4[0] && b6[1] != b4[1] && b6[1] != b4[2] && b6[2] != b4[0] && b6[2] != b4[1] && b6[2] != b4[2]
             && b6[3] != b4[3] && b6[3] != b4[4] && b6[3] != b4[5] && b6[4] != b4[3] && b6[4] != b4[4] && b6[4] != b4[5] && b6[5] != b4[3] && b6[5] != b4[4] && b6[5] != b4[5]
             && b6[6] != b4[6] && b6[6] != b4[7] && b6[6] != b4[8] && b6[7] != b4[6] && b6[7] != b4[7] && b6[7] != b4[8] && b6[8] != b4[6] && b6[8] != b4[7] && b6[8] != b4[8]
             && b6[0] != b5[0] && b6[0] != b5[1] && b6[0] != b5[2] && b6[1] != b5[0] && b6[1] != b5[1] && b6[1] != b5[2] && b6[2] != b5[0] && b6[2] != b5[1] && b6[2] != b5[2]
             && b6[3] != b5[3] && b6[3] != b5[4] && b6[3] != b5[5] && b6[4] != b5[3] && b6[4] != b5[4] && b6[4] != b5[5] && b6[5] != b5[3] && b6[5] != b5[4] && b6[5] != b5[5]
             && b6[6] != b5[6] && b6[6] != b5[7] && b6[6] != b5[8] && b6[7] != b5[6] && b6[7] != b5[7] && b6[7] != b5[8] && b6[8] != b5[6] && b6[8] != b5[7] && b6[8] != b5[8])
    {
        c = 1;
    }
    else if (count == 7 && b7[0] != b1[0] && b7[0] != b1[3] && b7[0] != b1[6] && b7[3] != b1[0] && b7[3] != b1[3] && b7[3] != b1[6] && b7[6] != b1[0] && b7[6] != b1[3] && b7[6] != b1[6]
             && b7[1] != b1[1] && b7[1] != b1[4] && b7[1] != b1[7] && b7[4] != b1[1] && b7[4] != b1[4] && b7[4] != b1[7] && b7[7] != b1[1] && b7[7] != b1[4] && b7[7] != b1[7]
             && b7[2] != b1[2] && b7[2] != b1[5] && b7[2] != b1[8] && b7[5] != b1[2] && b7[5] != b1[5] && b7[5] != b1[8] && b7[8] != b1[2] && b7[8] != b1[5] && b7[8] != b1[8]
             && b7[0] != b4[0] && b7[0] != b4[3] && b7[0] != b4[6] && b7[3] != b4[0] && b7[3] != b4[3] && b7[3] != b4[6] && b7[6] != b4[0] && b7[6] != b4[3] && b7[6] != b4[6]
             && b7[1] != b4[1] && b7[1] != b4[4] && b7[1] != b4[7] && b7[4] != b4[1] && b7[4] != b4[4] && b7[4] != b4[7] && b7[7] != b4[1] && b7[7] != b4[4] && b7[7] != b4[7]
             && b7[2] != b4[2] && b7[2] != b4[5] && b7[2] != b4[8] && b7[5] != b4[2] && b7[5] != b4[5] && b7[5] != b4[8] && b7[8] != b4[2] && b7[8] != b4[5] && b7[8] != b4[8])
    {
        c = 1;
    }
    else if (count == 8 && b8[0] != b2[0] && b8[0] != b2[3] && b8[0] != b2[6] && b8[3] != b2[0] && b8[3] != b2[3] && b8[3] != b2[6] && b8[6] != b2[0] && b8[6] != b2[3] && b8[6] != b2[6]
             && b8[1] != b2[1] && b8[1] != b2[4] && b8[1] != b2[7] && b8[4] != b2[1] && b8[4] != b2[4] && b8[4] != b2[7] && b8[7] != b2[1] && b8[7] != b2[4] && b8[7] != b2[7]
             && b8[2] != b2[2] && b8[2] != b2[5] && b8[2] != b2[8] && b8[5] != b2[2] && b8[5] != b2[5] && b8[5] != b2[8] && b8[8] != b2[2] && b8[8] != b2[5] && b8[8] != b2[8]
             && b8[0] != b5[0] && b8[0] != b5[3] && b8[0] != b5[6] && b8[3] != b5[0] && b8[3] != b5[3] && b8[3] != b5[6] && b8[6] != b5[0] && b8[6] != b5[3] && b8[6] != b5[6]
             && b8[1] != b5[1] && b8[1] != b5[4] && b8[1] != b5[7] && b8[4] != b5[1] && b8[4] != b5[4] && b8[4] != b5[7] && b8[7] != b5[1] && b8[7] != b5[4] && b8[7] != b5[7]
             && b8[2] != b5[2] && b8[2] != b5[5] && b8[2] != b5[8] && b8[5] != b5[2] && b8[5] != b5[5] && b8[5] != b5[8] && b8[8] != b5[2] && b8[8] != b5[5] && b8[8] != b5[8]
             && b8[0] != b7[0] && b8[0] != b7[1] && b8[0] != b7[2] && b8[1] != b7[0] && b8[1] != b7[1] && b8[1] != b7[2] && b8[2] != b7[0] && b8[2] != b7[1] && b8[2] != b7[2]
             && b8[3] != b7[3] && b8[3] != b7[4] && b8[3] != b7[5] && b8[4] != b7[3] && b8[4] != b7[4] && b8[4] != b7[5] && b8[5] != b7[3] && b8[5] != b7[4] && b8[5] != b7[5]
             && b8[6] != b7[6] && b8[6] != b7[7] && b8[6] != b7[8] && b8[7] != b7[6] && b8[7] != b7[7] && b8[7] != b7[8] && b8[8] != b7[6] && b8[8] != b7[7] && b8[8] != b7[8])
    {
        c = 1;
    }
    else if (count == 9 && b9[0] != b3[0] && b9[0] != b3[3] && b9[0] != b3[6] && b9[3] != b3[0] && b9[3] != b3[3] && b9[3] != b3[6] && b9[6] != b3[0] && b9[6] != b3[3] && b9[6] != b3[6]
             && b9[1] != b3[1] && b9[1] != b3[4] && b9[1] != b3[7] && b9[4] != b3[1] && b9[4] != b3[4] && b9[4] != b3[7] && b9[7] != b3[1] && b9[7] != b3[4] && b9[7] != b3[7]
             && b9[2] != b3[2] && b9[2] != b3[5] && b9[2] != b3[8] && b9[5] != b3[2] && b9[5] != b3[5] && b9[5] != b3[8] && b9[8] != b3[2] && b9[8] != b3[5] && b9[8] != b3[8]
             && b9[0] != b6[0] && b9[0] != b6[3] && b9[0] != b6[6] && b9[3] != b6[0] && b9[3] != b6[3] && b9[3] != b6[6] && b9[6] != b6[0] && b9[6] != b6[3] && b9[6] != b6[6]
             && b9[1] != b6[1] && b9[1] != b6[4] && b9[1] != b6[7] && b9[4] != b6[1] && b9[4] != b6[4] && b9[4] != b6[7] && b9[7] != b6[1] && b9[7] != b6[4] && b9[7] != b6[7]
             && b9[2] != b6[2] && b9[2] != b6[5] && b9[2] != b6[8] && b9[5] != b6[2] && b9[5] != b6[5] && b9[5] != b6[8] && b9[8] != b6[2] && b9[8] != b6[5] && b9[8] != b6[8]
             && b9[0] != b7[0] && b9[0] != b7[1] && b9[0] != b7[2] && b9[1] != b7[0] && b9[1] != b7[1] && b9[1] != b7[2] && b9[2] != b7[0] && b9[2] != b7[1] && b9[2] != b7[2]
             && b9[3] != b7[3] && b9[3] != b7[4] && b9[3] != b7[5] && b9[4] != b7[3] && b9[4] != b7[4] && b9[4] != b7[5] && b9[5] != b7[3] && b9[5] != b7[4] && b9[5] != b7[5]
             && b9[6] != b7[6] && b9[6] != b7[7] && b9[6] != b7[8] && b9[7] != b7[6] && b9[7] != b7[7] && b9[7] != b7[8] && b9[8] != b7[6] && b9[8] != b7[7] && b9[8] != b7[8]
             && b9[0] != b8[0] && b9[0] != b8[1] && b9[0] != b8[2] && b9[1] != b8[0] && b9[1] != b8[1] && b9[1] != b8[2] && b9[2] != b8[0] && b9[2] != b8[1] && b9[2] != b8[2]
             && b9[3] != b8[3] && b9[3] != b8[4] && b9[3] != b8[5] && b9[4] != b8[3] && b9[4] != b8[4] && b9[4] != b8[5] && b9[5] != b8[3] && b9[5] != b8[4] && b9[5] != b8[5]
             && b9[6] != b8[6] && b9[6] != b8[7] && b9[6] != b8[8] && b9[7] != b8[6] && b9[7] != b8[7] && b9[7] != b8[8] && b9[8] != b8[6] && b9[8] != b8[7] && b9[8] != b8[8])
    {
        c = 1;
    }
}

//random number generator without any number repeating. (1-9)
void box(int b[])
{
    int i = 0, count = 0;

    b[0] = ((rand() % 9) + 1);

    for (i = 1 ; i <= 8 ; i++)
    {
        do
        {
            count = 0;

            b[i] = ((rand() % 9) + 1);

            for (int n = (i - 1) ; n >= 0 ; n--)
            {
                if (b[i] == b[n])
                {
                    count = 1;

                    n = -1;
                }
            }
        } while (count != 0);
    }
}

void box9(int b9[], int b3[], int b6[], int b7[], int b8[], int& j)
{
    int i = 0, counter = 0;

    do
    {
        i = 0;

        b9[0] = ((rand() % 9) + 1);

        if ((b9[0] == b3[1] || b9[0] == b3[4] || b9[0] == b3[7] || b9[0] == b6[1] || b9[0] == b6[4] || b9[0] == b6[7])
           && (b9[0] == b3[2] || b9[0] == b3[5] || b9[0] == b3[8] || b9[0] == b6[2] || b9[0] == b6[5] || b9[0] == b6[8])
           && (b9[0] == b7[3] || b9[0] == b7[4] || b9[0] == b7[5] || b9[0] == b8[3] || b9[0] == b8[4] || b9[0] == b8[5])
           && (b9[0] == b7[6] || b9[0] == b7[7] || b9[0] == b7[8] || b9[0] == b8[6] || b9[0] == b8[7] || b9[0] == b8[8]))
        {
            i = 1;
        }

        counter++;
    } while ((b9[0] == b7[0] || b9[0] == b7[1] || b9[0] == b7[2] || b9[0] == b8[0] || b9[0] == b8[1] || b9[0] == b8[2]
             || b9[0] == b3[0] || b9[0] == b3[3] || b9[0] == b3[6] || b9[0] == b6[0] || b9[0] == b6[3] || b9[0] == b6[6]
             || i != 1) && counter <= 50);

    if (counter > 50)
    {
        j = 1;
    }
    else
    {
        counter = 0;

        do
        {
            i = 0;

            b9[1] = ((rand() % 9) + 1);

            if ((b9[1] == b3[0] || b9[1] == b3[3] || b9[1] == b3[6] || b9[1] == b6[0] || b9[1] == b6[3] || b9[1] == b6[6])
               && (b9[1] == b3[2] || b9[1] == b3[5] || b9[1] == b3[8] || b9[1] == b6[2] || b9[1] == b6[5] || b9[1] == b6[8])
               && (b9[1] == b7[3] || b9[1] == b7[4] || b9[1] == b7[5] || b9[1] == b8[3] || b9[1] == b8[4] || b9[1] == b8[5])
               && (b9[1] == b7[6] || b9[1] == b7[7] || b9[1] == b7[8] || b9[1] == b8[6] || b9[1] == b8[7] || b9[1] == b8[8]))
            {
                i = 1;
            }

            counter++;
        } while ((b9[1] == b9[0] || b9[1] == b7[0] || b9[1] == b7[1] || b9[1] == b7[2] || b9[1] == b8[0] || b9[1] == b8[1] || b9[1] == b8[2]
                 || b9[1] == b3[1] || b9[1] == b3[4] || b9[1] == b3[7] || b9[1] == b6[1] || b9[1] == b6[4] || b9[1] == b6[7]
                 || i != 1) && counter <= 50);

        if (counter > 50)
        {
            j = 1;
        }
        else
        {
            counter = 0;

            do
            {
              i = 0;

              b9[2] = ((rand() % 9) + 1);

              if ((b9[2] == b3[0] || b9[2] == b3[3] || b9[2] == b3[6] || b9[2] == b6[0] || b9[2] == b6[3] || b9[2] == b6[6])
                   && (b9[2] == b3[1] || b9[2] == b3[4] || b9[2] == b3[7] || b9[2] == b6[1] || b9[2] == b6[4] || b9[2] == b6[7])
                   && (b9[2] == b7[3] || b9[2] == b7[4] || b9[2] == b7[5] || b9[2] == b8[3] || b9[2] == b8[4] || b9[2] == b8[5])
                   && (b9[2] == b7[6] || b9[2] == b7[7] || b9[2] == b7[8] || b9[2] == b8[6] || b9[2] == b8[7] || b9[2] == b8[8]))
                {
                    i = 1;
                }

                counter++;
            } while ((b9[2] == b9[0] || b9[2] == b9[1] || b9[2] == b7[0] || b9[2] == b7[1] || b9[2] == b7[2] || b9[2] == b8[0] || b9[2] == b8[1] || b9[2] == b8[2]
                     || b9[2] == b3[2] || b9[2] == b3[5] || b9[2] == b3[8] || b9[2] == b6[2] || b9[2] == b6[5] || b9[2] == b6[8]
                     || i != 1) && counter <= 50);

            if (counter > 50)
            {
                j = 1;
            }
            else
            {
                counter = 0;

                do
                {
                  i = 0;

                  b9[3] = ((rand() % 9) + 1);

                  if ((b9[3] == b3[1] || b9[3] == b3[4] || b9[3] == b3[7] || b9[3] == b6[1] || b9[3] == b6[4] || b9[3] == b6[7])
                       && (b9[3] == b3[2] || b9[3] == b3[5] || b9[3] == b3[8] || b9[3] == b6[2] || b9[3] == b6[5] || b9[3] == b6[8])
                       && (b9[3] == b7[0] || b9[3] == b7[1] || b9[3] == b7[2] || b9[3] == b8[0] || b9[3] == b8[1] || b9[3] == b8[2])
                       && (b9[3] == b7[6] || b9[3] == b7[7] || b9[3] == b7[8] || b9[3] == b8[6] || b9[3] == b8[7] || b9[3] == b8[8]))
                    {
                        i = 1;
                    }

                    counter++;
                } while ((b9[3] == b9[0] || b9[3] == b9[1] || b9[3] == b9[2] || b9[3] == b7[3] || b9[3] == b7[4] || b9[3] == b7[5] || b9[3] == b8[3] || b9[3] == b8[4] || b9[3] == b8[5]
                         || b9[3] == b3[0] || b9[3] == b3[3] || b9[3] == b3[6] || b9[3] == b6[0] || b9[3] == b6[3] || b9[3] == b6[6]
                         || i != 1) && counter <= 50);

                if (counter > 50)
                {
                    j = 1;
                }
                else
                {
                    counter = 0;

                    do
                    {
                      i = 0;

                      b9[4] = ((rand() % 9) + 1);

                      if ((b9[4] == b3[0] || b9[4] == b3[3] || b9[4] == b3[6] || b9[4] == b6[0] || b9[4] == b6[3] || b9[4] == b6[6])
                           && (b9[4] == b3[2] || b9[4] == b3[5] || b9[4] == b3[8] || b9[4] == b6[2] || b9[4] == b6[5] || b9[4] == b6[8])
                           && (b9[4] == b7[0] || b9[4] == b7[1] || b9[4] == b7[2] || b9[4] == b8[0] || b9[4] == b8[1] || b9[4] == b8[2])
                           && (b9[4] == b7[6] || b9[4] == b7[7] || b9[4] == b7[8] || b9[4] == b8[6] || b9[4] == b8[7] || b9[4] == b8[8]))
                        {
                            i = 1;
                        }

                        counter++;
                    } while ((b9[4] == b9[0] || b9[4] == b9[1] || b9[4] == b9[2] || b9[4] == b9[3] || b9[4] == b7[3] || b9[4] == b7[4] || b9[4] == b7[5] || b9[4] == b8[3] || b9[4] == b8[4] || b9[4] == b8[5]
                             || b9[4] == b3[1] || b9[4] == b3[4] || b9[4] == b3[7] || b9[4] == b6[1] || b9[4] == b6[4] || b9[4] == b6[7]
                             || i != 1) && counter <= 50);

                    if (counter > 50)
                    {
                        j = 1;
                    }
                    else
                    {
                        counter = 0;

                        do
                        {
                          i = 0;

                          b9[5] = ((rand() % 9) + 1);

                          if ((b9[5] == b3[0] || b9[5] == b3[3] || b9[5] == b3[6] || b9[5] == b6[0] || b9[5] == b6[3] || b9[5] == b6[6])
                               && (b9[5] == b3[1] || b9[5] == b3[4] || b9[5] == b3[7] || b9[5] == b6[1] || b9[5] == b6[4] || b9[5] == b6[7])
                               && (b9[5] == b7[0] || b9[5] == b7[1] || b9[5] == b7[2] || b9[5] == b8[0] || b9[5] == b8[1] || b9[5] == b8[2])
                               && (b9[5] == b7[6] || b9[5] == b7[7] || b9[5] == b7[8] || b9[5] == b8[6] || b9[5] == b8[7] || b9[5] == b8[8]))
                            {
                                i = 1;
                            }

                            counter++;
                        } while ((b9[5] == b9[0] || b9[5] == b9[1] || b9[5] == b9[2] || b9[5] == b9[3] || b9[5] == b9[4]
                                 || b9[5] == b7[3] || b9[5] == b7[4] || b9[5] == b7[5] || b9[5] == b8[3] || b9[5] == b8[4] || b9[5] == b8[5]
                                 || b9[5] == b3[2] || b9[5] == b3[5] || b9[5] == b3[8] || b9[5] == b6[2] || b9[5] == b6[5] || b9[5] == b6[8]
                                 || i != 1) && counter <= 50);

                        if (counter > 50)
                        {
                            j = 1;
                        }
                        else
                        {
                            counter = 0;

                            do
                            {
                              i = 0;

                              b9[6] = ((rand() % 9) + 1);

                              if ((b9[6] == b3[1] || b9[6] == b3[4] || b9[6] == b3[7] || b9[6] == b6[1] || b9[6] == b6[4] || b9[6] == b6[7])
                                   && (b9[6] == b3[2] || b9[6] == b3[5] || b9[6] == b3[8] || b9[6] == b6[2] || b9[6] == b6[5] || b9[6] == b6[8])
                                   && (b9[6] == b7[0] || b9[6] == b7[1] || b9[6] == b7[2] || b9[6] == b8[0] || b9[6] == b8[1] || b9[6] == b8[2])
                                   && (b9[6] == b7[3] || b9[6] == b7[4] || b9[6] == b7[5] || b9[6] == b8[3] || b9[6] == b8[4] || b9[6] == b8[5]))
                                {
                                    i = 1;
                                }

                                counter++;
                            } while ((b9[6] == b9[0] || b9[6] == b9[1] || b9[6] == b9[2] || b9[6] == b9[3] || b9[6] == b9[4] || b9[6] == b9[5]
                                     || b9[6] == b7[6] || b9[6] == b7[7] || b9[6] == b7[8] || b9[6] == b8[6] || b9[6] == b8[7] || b9[6] == b8[8]
                                     || b9[6] == b3[0] || b9[6] == b3[3] || b9[6] == b3[6] || b9[6] == b6[0] || b9[6] == b6[3] || b9[6] == b6[6]
                                     || i != 1) && counter <= 50);

                            if (counter > 50)
                            {
                                j = 1;
                            }
                            else
                            {
                                counter = 0;

                                do
                                {
                                  i = 0;

                                  b9[7] = ((rand() % 9) + 1);

                                  if ((b9[7] == b3[0] || b9[7] == b3[3] || b9[7] == b3[6] || b9[7] == b6[0] || b9[7] == b6[3] || b9[7] == b6[6])
                                       && (b9[7] == b3[2] || b9[7] == b3[5] || b9[7] == b3[8] || b9[7] == b6[2] || b9[7] == b6[5] || b9[7] == b6[8])
                                       && (b9[7] == b7[0] || b9[7] == b7[1] || b9[7] == b7[2] || b9[7] == b8[0] || b9[7] == b8[1] || b9[7] == b8[2])
                                       && (b9[7] == b7[3] || b9[7] == b7[4] || b9[7] == b7[5] || b9[7] == b8[3] || b9[7] == b8[4] || b9[7] == b8[5]))
                                    {
                                        i = 1;
                                    }

                                    counter++;
                                } while ((b9[7] == b9[0] || b9[7] == b9[1] || b9[7] == b9[2] || b9[7] == b9[3] || b9[7] == b9[4] || b9[7] == b9[5] || b9[7] == b9[6]
                                         || b9[7] == b7[6] || b9[7] == b7[7] || b9[7] == b7[8] || b9[7] == b8[6] || b9[7] == b8[7] || b9[7] == b8[8]
                                         || b9[7] == b3[1] || b9[7] == b3[4] || b9[7] == b3[7] || b9[7] == b6[1] || b9[7] == b6[4] || b9[7] == b6[7]
                                         || i != 1) && counter <= 50);

                                if (counter > 50)
                                {
                                    j = 1;
                                }
                                else
                                {
                                    counter = 0;

                                    do
                                    {
                                      i = 0;

                                      b9[8] = ((rand() % 9) + 1);

                                      if ((b9[8] == b3[0] || b9[8] == b3[3] || b9[8] == b3[6] || b9[8] == b6[0] || b9[8] == b6[3] || b9[8] == b6[6])
                                           && (b9[8] == b3[1] || b9[8] == b3[4] || b9[8] == b3[7] || b9[8] == b6[1] || b9[8] == b6[4] || b9[8] == b6[7])
                                           && (b9[8] == b7[0] || b9[8] == b7[1] || b9[8] == b7[2] || b9[8] == b8[0] || b9[8] == b8[1] || b9[8] == b8[2])
                                           && (b9[8] == b7[3] || b9[8] == b7[4] || b9[8] == b7[5] || b9[8] == b8[3] || b9[8] == b8[4] || b9[8] == b8[5]))
                                        {
                                            i = 1;
                                        }

                                        counter++;
                                    } while ((b9[8] == b9[0] || b9[8] == b9[1] || b9[8] == b9[2] || b9[8] == b9[3] || b9[8] == b9[4] || b9[8] == b9[5] || b9[8] == b9[6] || b9[8] == b9[7]
                                             || b9[8] == b7[6] || b9[8] == b7[7] || b9[8] == b7[8] || b9[8] == b8[6] || b9[8] == b8[7] || b9[8] == b8[8]
                                             || b9[8] == b3[2] || b9[8] == b3[5] || b9[8] == b3[8] || b9[8] == b6[2] || b9[8] == b6[5] || b9[8] == b6[8]
                                             || i != 1) && counter <= 50);

                                    if (counter > 50)
                                    {
                                        j = 1;
                                    }
                                    else
                                    {
                                        j = 0;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

void generator(int b1[], int b2[], int b3[], int b4[], int b5[], int b6[], int b7[], int b8[], int b9[])
{
    cout << endl;
    cout << "Generating puzzle..." << endl;

    int j = 0, counter = 0, count = 0, c = 0;

    do
    {
        b1[9]={0}, b2[9]={0}, b3[9]={0}, b4[9]={0}, b5[9]={0}, b6[9]={0}, b7[9]={0}, b8[9]={0}, b9[9]={0};

        count = 1;
        counter = 0;
        box(b1);

        count = 2;
        do
        {
        box(b2);
        check(c, count, b1, b2, b3, b4, b5, b6, b7, b8, b9);

        counter++;
        } while (c != 1 && counter <= 500);

        if (c == 1)
        {
            c = 0;
            count = 3;
            counter = 0;
            do
            {
            box(b3);
            check(c, count, b1, b2, b3, b4, b5, b6, b7, b8, b9);

            counter++;
            } while (c != 1 && counter <= 500);

            if (c == 1)
            {
                c = 0;
                count = 4;
                counter = 0;
                do
                {
                box(b4);
                check(c, count, b1, b2, b3, b4, b5, b6, b7, b8, b9);

                counter++;
                } while (c != 1 && counter <= 1000);

                if (c == 1)
                {
                    c = 0;
                    count = 5;
                    counter = 0;
                    do
                    {
                    box(b5);
                    check(c, count, b1, b2, b3, b4, b5, b6, b7, b8, b9);

                    counter++;
                    } while (c != 1 && counter <= 1000);

                    if (c == 1)
                    {
                        c = 0;
                        count = 6;
                        counter = 0;
                        do
                        {
                        box(b6);
                        check(c, count, b1, b2, b3, b4, b5, b6, b7, b8, b9);

                        counter++;
                        } while (c != 1 && counter <= 5000);

                        if (c == 1)
                        {
                            c = 0;
                            count = 7;
                            counter = 0;
                            do
                            {
                            box(b7);
                            check(c, count, b1, b2, b3, b4, b5, b6, b7, b8, b9);

                            counter++;
                            } while (c != 1 && counter <= 10000);

                            if (c == 1)
                            {
                                    c = 0;
                                    count = 8;
                                    counter = 0;

                                    do
                                    {
                                    box(b8);
                                    check(c, count, b1, b2, b3, b4, b5, b6, b7, b8, b9);

                                    counter++;
                                    } while (c != 1 && counter <= 50000);

                                    if (c == 1)
                                    {
                                       box9(b9, b3, b6, b7, b8, j);
                                   }
                                   else
                                   {
                                       j = 1;
                                   }
                            }
                            else
                            {
                                j = 1;
                            }


                        }
                        else
                        {
                            j = 1;
                        }


                    }
                    else
                    {
                        j = 1;
                    }
                }
                else
                {
                    j = 1;
                }
            }
            else
            {
                j = 1;
            }
        }
        else
        {
            j = 1;
        }
    } while (j == 1);
}

//row assignment
void row(int r[], int box_a[], int box_b[], int box_c[], int count)
{
    if (count == 1)
    {
        int x = 0;

        for (int i = 0 ; i <= 8 ; i++)
        {
            if (i <= 2)
            {
                r[i] = box_a[x];
            }
            else if (i <= 5)
            {
                r[i] = box_b[x];
            }
            else if (i <= 8)
            {
                r[i] = box_c[x];
            }

            if (x == 2)
            {
                x = 0;
            }
            else
            {
                x++;
            }
        }
    }
    else if (count == 2)
    {
        int x = 3;

        for (int i = 0 ; i <= 8 ; i++)
        {
            if (i <= 2)
            {
                r[i] = box_a[x];
            }
            else if (i <= 5)
            {
                r[i] = box_b[x];
            }
            else if (i <= 8)
            {
                r[i] = box_c[x];
            }

            if (x == 5)
            {
                x = 3;
            }
            else
            {
                x++;
            }
        }
    }
    else if (count == 3)
    {
        int x = 6;

        for (int i = 0 ; i <= 8 ; i++)
        {
            if (i <= 2)
            {
                r[i] = box_a[x];
            }
            else if (i <= 5)
            {
                r[i] = box_b[x];
            }
            else if (i <= 8)
            {
                r[i] = box_c[x];
            }

            if (x == 8)
            {
                x = 6;
            }
            else
            {
                x++;
            }
        }
    }
}

void assign_blank(int db[])
{
    int z = 0, y[5] = {0};

    z = ((rand() % 3) + 1);

    y[0] = ((rand() % 9) + 1);

    db[y[0]] = 0;

    for (int i = 1 ; i <= (z - 1) ; i++)
    {
        int count = 0;

        do
        {
            count = 0;

            y[i] = ((rand() % 9) + 1);

            for (int n = (i - 1) ; n >= 0 ; n--)
            {
                if (y[i] == y[n])
                {
                    count = 1;

                    n = -1;
                }
            }
        } while (count == 1);

        db[y[i]] = 0;
    }
}

void assign_blank_hard(int db[])
{
    int z = 0, y[5] = {0};

    z = ((rand() % 6) + 1);

    y[0] = ((rand() % 9) + 1);

    db[y[0]] = 0;

    for (int i = 1 ; i <= (z - 1) ; i++)
    {
        int count = 0;

        do
        {
            count = 0;

            y[i] = ((rand() % 9) + 1);

            for (int n = (i - 1) ; n >= 0 ; n--)
            {
                if (y[i] == y[n])
                {
                    count = 1;

                    n = -1;
                }
            }
        } while (count == 1);

        db[y[i]] = 0;
    }
}

void displayr(int const r[], int& counter, int& f, int const j)
{
    cout << "   " << counter << "*";

    for (int i = 0 ; i <= 8 ; i++)
    {
        if (i == 8 && r[i] != 0)
        {
            cout << " " << r[i] << " *" << endl;
        }
        else if (i == 8 && r[i] == 0)
        {
            cout << " " << " " << " *" << endl;

            if (j == 0)
            {
               f++;
            }
        }
        else if ((i == 3 || i == 6) && r[i] != 0)
        {
            cout << " | " << r[i];
        }
        else if ((i == 3 || i == 6) && r[i] == 0)
        {
            cout << " | " << " ";

            if (j == 0)
            {
               f++;
            }
        }
        else if (r[i] != 0)
        {
            cout << " " << r[i];
        }
        else
        {
            cout << " " << " ";

            if (j == 0)
            {
               f++;
            }
        }
    }

    counter++;
}

void display(int const r1[], int const r2[], int const r3[], int const r4[], int const r5[], int const r6[], int const r7[], int const r8[], int const r9[], int& f, int const j, int const check)
{
    int counter = 1;

    cout << "*******************************************************************************" << endl;

    cout << endl;

    cout << "    " << "C 1 2 3   4 5 6   7 8 9 " << endl;

    cout << "   " << "R* * * * * * * * * * * * *" << endl;

    displayr(r1, counter, f, j);
    displayr(r2, counter, f, j);
    displayr(r3, counter, f, j);

    cout << "    " << "* - - - - - - - - - - - *" << endl;

    displayr(r4, counter, f, j);
    displayr(r5, counter, f, j);
    displayr(r6, counter, f, j);

    cout << "    " << "* - - - - - - - - - - - *" << endl;

    displayr(r7, counter, f, j);
    displayr(r8, counter, f, j);
    displayr(r9, counter, f, j);

    cout << "    " << "* * * * * * * * * * * * *" << endl;

    cout << endl;
}

void easy(int b1[], int b2[], int b3[], int b4[], int b5[], int b6[], int b7[], int b8[], int b9[], int& f)
{
    int db1[9]={0}, db2[9]={0}, db3[9]={0}, db4[9]={0}, db5[9]={0}, db6[9]={0}, db7[9]={0}, db8[9]={0}, db9[9]={0};

    for (int i = 0 ; i <= 8 ; i++)
    {
        db1[i] = b1[i];
        db2[i] = b2[i];
        db3[i] = b3[i];
        db4[i] = b4[i];
        db5[i] = b5[i];
        db6[i] = b6[i];
        db7[i] = b7[i];
        db8[i] = b8[i];
        db9[i] = b9[i];
    }

    int a[6];

    for (int i = 0 ; i <= 5 ; i++)
    {
        if(i == 0)
        {
            a[i] = ((rand() % 9) + 1);
        }
        else
        {
            int count = 0;

            do
            {
                count = 0;

                a[i] = ((rand() % 9) + 1);

                for (int n = (i - 1) ; n >= 0 ; n--)
                {
                    if (a[i] == a[n])
                    {
                        count = 1;

                        n = -1;
                    }
                }
            } while (count != 0);
        }
    }

    for (int i = 0 ; i <= 5 ; i++)
    {
        if(a[i] == 1)
        {
            assign_blank(db1);
        }
        else if(a[i] == 2)
        {
            assign_blank(db2);
        }
        else if(a[i] == 3)
        {
            assign_blank(db3);
        }
        else if(a[i] == 4)
        {
            assign_blank(db4);
        }
        else if(a[i] == 5)
        {
            assign_blank(db5);
        }
        else if(a[i] == 6)
        {
            assign_blank(db6);
        }
        else if(a[i] == 7)
        {
            assign_blank(db7);
        }
        else if(a[i] == 8)
        {
            assign_blank(db8);
        }
        else if(a[i] == 9)
        {
            assign_blank(db9);
        }
    }

    b1[9]={0}, b2[9]={0}, b3[9]={0}, b4[9]={0}, b5[9]={0}, b6[9]={0}, b7[9]={0}, b8[9]={0}, b9[9]={0};
    int count = 0;

    //row assignment
    {
        count = 1;
        row(b1, db1, db2, db3, count);

        count++;
        row(b2, db1, db2, db3, count);

        count++;
        row(b3, db1, db2, db3, count);

        count = 1;
        row(b4, db4, db5, db6, count);

        count++;
        row(b5, db4, db5, db6, count);

        count++;
        row(b6, db4, db5, db6, count);

        count = 1;
        row(b7, db7, db8, db9, count);

        count++;
        row(b8, db7, db8, db9, count);

        count++;
        row(b9, db7, db8, db9, count);
    }
}

void medium(int b1[], int b2[], int b3[], int b4[], int b5[], int b6[], int b7[], int b8[], int b9[], int& f)
{
    int db1[9]={0}, db2[9]={0}, db3[9]={0}, db4[9]={0}, db5[9]={0}, db6[9]={0}, db7[9]={0}, db8[9]={0}, db9[9]={0};

    for (int i = 0 ; i <= 8 ; i++)
    {
        db1[i] = b1[i];
        db2[i] = b2[i];
        db3[i] = b3[i];
        db4[i] = b4[i];
        db5[i] = b5[i];
        db6[i] = b6[i];
        db7[i] = b7[i];
        db8[i] = b8[i];
        db9[i] = b9[i];
    }

    int a[8];

    for (int i = 0 ; i <= 8 ; i++)
    {
        if(i == 0)
        {
            a[i] = ((rand() % 9) + 1);
        }
        else
        {
            int count = 0;

            do
            {
                count = 0;

                a[i] = ((rand() % 9) + 1);

                for (int n = (i - 1) ; n >= 0 ; n--)
                {
                    if (a[i] == a[n])
                    {
                        count = 1;

                        n = -1;
                    }
                }
            } while (count != 0);
        }
    }

    for (int i = 0 ; i <= 7 ; i++)
    {
        if(a[i] == 1)
        {
            assign_blank(db1);
        }
        else if(a[i] == 2)
        {
            assign_blank(db2);
        }
        else if(a[i] == 3)
        {
            assign_blank(db3);
        }
        else if(a[i] == 4)
        {
            assign_blank(db4);
        }
        else if(a[i] == 5)
        {
            assign_blank(db5);
        }
        else if(a[i] == 6)
        {
            assign_blank(db6);
        }
        else if(a[i] == 7)
        {
            assign_blank(db7);
        }
        else if(a[i] == 8)
        {
            assign_blank(db8);
        }
        else if(a[i] == 9)
        {
            assign_blank(db9);
        }
    }

    b1[9]={0}, b2[9]={0}, b3[9]={0}, b4[9]={0}, b5[9]={0}, b6[9]={0}, b7[9]={0}, b8[9]={0}, b9[9]={0};
    int count = 0;

    //row assignment
    {
        count = 1;
        row(b1, db1, db2, db3, count);

        count++;
        row(b2, db1, db2, db3, count);

        count++;
        row(b3, db1, db2, db3, count);

        count = 1;
        row(b4, db4, db5, db6, count);

        count++;
        row(b5, db4, db5, db6, count);

        count++;
        row(b6, db4, db5, db6, count);

        count = 1;
        row(b7, db7, db8, db9, count);

        count++;
        row(b8, db7, db8, db9, count);

        count++;
        row(b9, db7, db8, db9, count);
    }
}

void hard(int b1[], int b2[], int b3[], int b4[], int b5[], int b6[], int b7[], int b8[], int b9[], int& f)
{
    int db1[9]={0}, db2[9]={0}, db3[9]={0}, db4[9]={0}, db5[9]={0}, db6[9]={0}, db7[9]={0}, db8[9]={0}, db9[9]={0};

    for (int i = 0 ; i <= 8 ; i++)
    {
        db1[i] = b1[i];
        db2[i] = b2[i];
        db3[i] = b3[i];
        db4[i] = b4[i];
        db5[i] = b5[i];
        db6[i] = b6[i];
        db7[i] = b7[i];
        db8[i] = b8[i];
        db9[i] = b9[i];
    }

    int a[9];

    for (int i = 0 ; i <= 8 ; i++)
    {
        if(i == 0)
        {
            a[i] = ((rand() % 9) + 1);
        }
        else
        {
            int count = 0;

            do
            {
                count = 0;

                a[i] = ((rand() % 9) + 1);

                for (int n = (i - 1) ; n >= 0 ; n--)
                {
                    if (a[i] == a[n])
                    {
                        count = 1;

                        n = -1;
                    }
                }
            } while (count != 0);
        }
    }

    for (int i = 0 ; i <= 8 ; i++)
    {
        if(a[i] == 1)
        {
            assign_blank_hard(db1);
        }
        else if(a[i] == 2)
        {
            assign_blank_hard(db2);
        }
        else if(a[i] == 3)
        {
            assign_blank_hard(db3);
        }
        else if(a[i] == 4)
        {
            assign_blank_hard(db4);
        }
        else if(a[i] == 5)
        {
            assign_blank_hard(db5);
        }
        else if(a[i] == 6)
        {
            assign_blank_hard(db6);
        }
        else if(a[i] == 7)
        {
            assign_blank_hard(db7);
        }
        else if(a[i] == 8)
        {
            assign_blank_hard(db8);
        }
        else if(a[i] == 9)
        {
            assign_blank_hard(db9);
        }
    }

    b1[9]={0}, b2[9]={0}, b3[9]={0}, b4[9]={0}, b5[9]={0}, b6[9]={0}, b7[9]={0}, b8[9]={0}, b9[9]={0};
    int count = 0;

    //row assignment
    {
        count = 1;
        row(b1, db1, db2, db3, count);

        count++;
        row(b2, db1, db2, db3, count);

        count++;
        row(b3, db1, db2, db3, count);

        count = 1;
        row(b4, db4, db5, db6, count);

        count++;
        row(b5, db4, db5, db6, count);

        count++;
        row(b6, db4, db5, db6, count);

        count = 1;
        row(b7, db7, db8, db9, count);

        count++;
        row(b8, db7, db8, db9, count);

        count++;
        row(b9, db7, db8, db9, count);
    }
}

void input(int row, int column, int num, int const r1[], int const r2[], int const r3[], int const r4[], int const r5[], int const r6[], int const r7[], int const r8[], int const r9[],
           int b1[], int b2[], int b3[], int b4[], int b5[], int b6[], int b7[], int b8[], int b9[], int& f)
{
    if(row == 1)
    {
        if(num == r1[column-1])
        {
            f--;

            b1[column-1] = num;
        }
        else
        {
            cout << "Incorrect Answer!" << endl;
        }
    }
    else if(row == 2)
    {
        if(num == r2[column-1])
        {
            f--;

            b2[column-1] = num;
        }
        else
        {
            cout << "Incorrect Answer!" << endl;
        }
    }
    else if(row == 3)
    {
        if(num == r3[column-1])
        {
            f--;

            b3[column-1] = num;
        }
        else
        {
            cout << "Incorrect Answer!" << endl;
        }
    }
    else if(row == 4)
    {
        if(num == r4[column-1])
        {
            f--;

            b4[column-1] = num;
        }
        else
        {
            cout << "Incorrect Answer!" << endl;
        }
    }
    else if(row == 5)
    {
        if(num == r5[column-1])
        {
            f--;

            b5[column-1] = num;
        }
        else
        {
            cout << "Incorrect Answer!" << endl;
        }
    }
    else if(row == 6)
    {
        if(num == r6[column-1])
        {
            f--;

            b6[column-1] = num;
        }
        else
        {
            cout << "Incorrect Answer!" << endl;
        }
    }
    else if(row == 7)
    {
        if(num == r7[column-1])
        {
            f--;

            b7[column-1] = num;
        }
        else
        {
            cout << "Incorrect Answer!" << endl;
        }
    }
    else if(row == 8)
    {
        if(num == r8[column-1])
        {
            f--;

            b8[column-1] = num;
        }
        else
        {
            cout << "Incorrect Answer!" << endl;
        }
    }
    else if(row == 9)
    {
        if(num == r9[column-1])
        {
            f--;

            b9[column-1] = num;
        }
        else
        {
            cout << "Incorrect Answer!" << endl;
        }
    }
}

void config(int const choice, int const counter, int const difficulty, int const f,
            int const b1[], int const b2[], int const b3[], int const b4[], int const b5[], int const b6[], int const b7[], int const b8[], int const b9[],
            int const r1[], int const r2[], int const r3[], int const r4[], int const r5[], int const r6[], int const r7[], int const r8[], int const r9[])
{
    ofstream outfile, config, solution;

    outfile.open("settings.dat");

    outfile << choice << endl;

    outfile << endl;

    outfile << counter << endl;

    outfile << endl;

    outfile << difficulty << endl;

    outfile << endl;

    outfile << f << endl;

    outfile << endl;

    outfile.close();

    config.open("configuration.dat");

    for (int i = 0 ; i <= 8 ; i++)
    {
        config << b1[i] << " ";
    }

    for (int i = 0 ; i <= 8 ; i++)
    {
        config << b2[i] << " ";
    }

    for (int i = 0 ; i <= 8 ; i++)
    {
        config << b3[i] << " ";
    }

    for (int i = 0 ; i <= 8 ; i++)
    {
        config << b4[i] << " ";
    }

    for (int i = 0 ; i <= 8 ; i++)
    {
        config << b5[i] << " ";
    }

    for (int i = 0 ; i <= 8 ; i++)
    {
        config << b6[i] << " ";
    }

    for (int i = 0 ; i <= 8 ; i++)
    {
        config << b7[i] << " ";
    }

    for (int i = 0 ; i <= 8 ; i++)
    {
        config << b8[i] << " ";
    }

    for (int i = 0 ; i <= 8 ; i++)
    {
        config << b9[i] << " ";
    }

    config.close();

    solution.open("solution.dat");

    //solutions
    for (int i = 0 ; i <= 8 ; i++)
    {
        solution << r1[i] << " ";
    }

    for (int i = 0 ; i <= 8 ; i++)
    {
        solution << r2[i] << " ";
    }

    for (int i = 0 ; i <= 8 ; i++)
    {
        solution << r3[i] << " ";
    }

    for (int i = 0 ; i <= 8 ; i++)
    {
        solution << r4[i] << " ";
    }

    for (int i = 0 ; i <= 8 ; i++)
    {
        solution << r5[i] << " ";
    }

    for (int i = 0 ; i <= 8 ; i++)
    {
        solution << r6[i] << " ";
    }

    for (int i = 0 ; i <= 8 ; i++)
    {
        solution << r7[i] << " ";
    }

    for (int i = 0 ; i <= 8 ; i++)
    {
        solution << r8[i] << " ";
    }

    for (int i = 0 ; i <= 8 ; i++)
    {
        solution << r9[i] << " ";
    }

    solution.close();
}

void game(int& choice, int& counter, int const difficulty, int r1[], int r2[], int r3[], int r4[], int r5[], int r6[], int r7[], int r8[], int r9[],
          int b1[], int b2[], int b3[], int b4[], int b5[], int b6[], int b7[], int b8[], int b9[], int& f, int& check)
{


    int row = 0;
    int j = 0;

    display(b1, b2, b3, b4, b5, b6, b7, b8, b9, f, j, check);

    if (check == 1)
    {
        f = f / 2;
        check = 0;
    }

    do
    {
        counter++;

        cout << "There are " << f << " unknown numbers." << endl << endl;

        cout << "Enter coordinates for input below." << endl << endl;

        int column = 0, num = 0;

        row = 0;

        do
        {
            cout << "Enter Row (1-9) (0 to exit): ";
            cin >> row;

            if (row > 9 || row < 0)
            {
                cout << "Error! Invalid input." << endl;
            }
        } while (row > 9 || row < 0);

        if (row > 0)
        {
            do
            {
                cout << "Enter Column (1-9): ";
                cin >> column;

                if (column > 9 || column < 1)
                {
                    cout << "Error! Invalid input." << endl;
                }
            } while (column > 9 || column < 1);

            do
            {
                cout << "Enter Number (1-9): ";
                cin >> num;

                if (num > 9 || num < 1)
                {
                    cout << "Error! Invalid input." << endl;
                }
            } while (num > 9 || num < 1);

            input(row, column, num, r1, r2, r3, r4, r5, r6, r7, r8, r9, b1, b2, b3, b4, b5, b6, b7, b8, b9, f);

            j = 1;
            display(b1, b2, b3, b4, b5, b6, b7, b8, b9, f, j, check);
        }
        else if (row == 0)
        {
            break;
        }
    } while(f > 0);

    if(f == 0)
    {
        cout << "Congratulations!" << endl;
        cout << "You have completed the puzzle in " << counter << " turns." << endl;

        ifstream infile;
        int a[5], b[5], c[5];

        infile.open("highscores.txt");

        if(!infile)
        {
            cout << "Error! File cannot open." << endl;
        }
        else
        {
            if (difficulty == 1)
            {
                infile >> a[0] >> a[1] >> a[2] >> a[3] >> a[4] >>
                            b[0] >> b[1] >> b[2] >> b[3] >> b[4] >>
                              c[0] >> c[1] >> c[2] >> c[3] >> c[4];

                for(int i = 0 ; i <= 4 ; i++)
                {
                    if(counter < a[i])
                    {
                        for(int z = 4 ; z >= i ; z--)
                        {
                            a[z] = a[z-1];
                        }

                        a[i] = counter;

                        cout << "You have made a top score and earned the " << endl;

                        i++;

                        if(i = 1)
                        {
                            cout << "1st position!" << endl;
                        }
                        else if(i = 2)
                        {
                            cout << "2nd position!" << endl;
                        }
                        else
                        {
                            cout << i << "rd position!" << endl;
                        }

                        ofstream outfile;

                        outfile.open("highscores.txt");

                        outfile << a[0] << "\t" << a[1] << "\t" << a[2] << "\t" << a[3] << "\t" << a[4] << endl <<
                                     b[0] << "\t" << b[1] << "\t" << b[2] << "\t" << b[3] << "\t" << b[4] << endl <<
                                       c[0] << "\t" << c[1] << "\t" << c[2] << "\t" << c[3] << "\t" << c[4];

                        i = 5;
                    }
                }
            }
            else if (difficulty == 2)
            {
                infile >> a[0] >> a[1] >> a[2] >> a[3] >> a[4] >>
                            b[0] >> b[1] >> b[2] >> b[3] >> b[4] >>
                              c[0] >> c[1] >> c[2] >> c[3] >> c[4];

                for(int i = 0 ; i <= 4 ; i++)
                {
                    if(counter < b[i])
                    {
                        for(int z = 4 ; z >= i ; z--)
                        {
                            b[z] = b[z-1];
                        }

                        b[i] = counter;

                        cout << "You have made a top score and earned the " << endl;

                        i++;

                        if(i = 1)
                        {
                            cout << "1st position!" << endl;
                        }
                        else if(i = 2)
                        {
                            cout << "2nd position!" << endl;
                        }
                        else
                        {
                            cout << i << "rd position!" << endl;
                        }

                        ofstream outfile;

                        outfile.open("highscores.txt");

                        outfile << a[0] << "\t" << a[1] << "\t" << a[2] << "\t" << a[3] << "\t" << a[4] << endl <<
                                     b[0] << "\t" << b[1] << "\t" << b[2] << "\t" << b[3] << "\t" << b[4] << endl <<
                                       c[0] << "\t" << c[1] << "\t" << c[2] << "\t" << c[3] << "\t" << c[4];

                        i = 5;
                    }

                }
            }
            else if (difficulty == 3)
            {
                infile >> a[0] >> a[1] >> a[2] >> a[3] >> a[4] >>
                            b[0] >> b[1] >> b[2] >> b[3] >> b[4] >>
                              c[0] >> c[1] >> c[2] >> c[3] >> c[4];

                for(int i = 0 ; i <= 4 ; i++)
                {
                    if(counter < c[i])
                    {
                        for(int z = 4 ; z >= i ; z--)
                        {
                            c[z] = c[z-1];
                        }

                        c[i] = counter;

                        cout << "You have made a top score and earned the " << endl;

                        i++;

                        if(i = 1)
                        {
                            cout << "1st position!" << endl;
                        }
                        else if(i = 2)
                        {
                            cout << "2nd position!" << endl;
                        }
                        else
                        {
                            cout << i << "rd position!" << endl;
                        }

                        ofstream outfile;

                        outfile.open("highscores.txt");

                        outfile << a[0] << "\t" << a[1] << "\t" << a[2] << "\t" << a[3] << "\t" << a[4] << endl <<
                                     b[0] << "\t" << b[1] << "\t" << b[2] << "\t" << b[3] << "\t" << b[4] << endl <<
                                       c[0] << "\t" << c[1] << "\t" << c[2] << "\t" << c[3] << "\t" << c[4];

                        i = 5;
                    }
                }
            }
        }
    }
    else if(row == 0)
    {
        int save;

        do
        {
            cout << endl;
            cout << "Do you wish to save the session (1 = Yes, 2 = No)? " << endl;
            cin >> save;

            if (save > 2 || save < 1)
            {
                cout << "Error! Invalid Input." << endl;

                cout << endl;
            }
            else if (save == 1)
            {
                config(choice, counter, difficulty, f, b1, b2, b3, b4, b5, b6, b7, b8, b9, r1, r2, r3, r4, r5, r6, r7, r8, r9);
            }
        } while (save > 2 || save < 1);
    }

    int choice2;

    do
    {
        cout << "*******************************************************************************" << endl << endl;;
        cout << "Enter '1' for Main Menu ,'2' to Exit: " << endl;
        cin >> choice2;

        if (choice2 == 1)
        {
            choice = 0;
        }
        else if (choice2 == 2)
        {
            choice = 4;
        }
        else
        {
            cout << endl;
            cout << "Error! Invalid input." << endl;
            cout << endl;
        }
    } while (choice2 < 1 || choice2 > 2);

    cout << "*******************************************************************************" << endl;
}

void newgame(int& choice)
{
    int r1[9]={0}, r2[9]={0}, r3[9]={0}, r4[9]={0}, r5[9]={0}, r6[9]={0}, r7[9]={0}, r8[9]={0}, r9[9]={0};
    int b1[9]={0}, b2[9]={0}, b3[9]={0}, b4[9]={0}, b5[9]={0}, b6[9]={0}, b7[9]={0}, b8[9]={0}, b9[9]={0};
    int count = 0;

    srand(time(NULL));

    //generator
    {
        generator(b1, b2, b3, b4, b5, b6, b7, b8, b9);
    }

    //row assignment
    {
        count = 1;
        row(r1, b1, b2, b3, count);

        count++;
        row(r2, b1, b2, b3, count);

        count++;
        row(r3, b1, b2, b3, count);

        count = 1;
        row(r4, b4, b5, b6, count);

        count++;
        row(r5, b4, b5, b6, count);

        count++;
        row(r6, b4, b5, b6, count);

        count = 1;
        row(r7, b7, b8, b9, count);

        count++;
        row(r8, b7, b8, b9, count);

        count++;
        row(r9, b7, b8, b9, count);
    }

    int difficulty = 0, f = 0;

    do
    {
        cout << endl;
        cout << "Difficulty (1 = Easy, 2 = Medium, 3 = Hard)? " << endl;
        cin >> difficulty;

        if (difficulty == 1)
        {
            easy(b1, b2, b3, b4, b5, b6, b7, b8, b9, f);
        }
        else if (difficulty == 2)
        {
            medium(b1, b2, b3, b4, b5, b6, b7, b8, b9, f);
        }
        else if (difficulty == 3)
        {
            hard(b1, b2, b3, b4, b5, b6, b7, b8, b9, f);
        }
        else
        {
            cout << "Error! Invalid input." << endl;
        }
    } while (difficulty < 1 || difficulty > 3);

    int counter = 0, check = 0;

    game(choice, counter, difficulty, r1, r2, r3, r4, r5, r6, r7, r8, r9, b1, b2, b3, b4, b5, b6, b7, b8, b9, f, check);
}

int main()
{
    cout << "\t\t\t\t   Sudoku" << endl;
    cout << "\t\t\t\t  ********" << endl;

    int choice = 0;

    do
    {
        cout << endl;
        cout << "Enter your choice. (1, 2, 3 or 4)" << endl;
        cout << "1. New Game\n2. Continue last game\n3. High Scores\n4. Exit" << endl << endl;
        cin >> choice;
        cout << "*******************************************************************************" << endl;

        if (choice == 1)
        {
            remove("settings.dat");
            remove("configuration.dat");
            remove("solution.dat");

            newgame(choice);
        }
        else if (choice == 2)
        {
            ifstream infile, config, solution;
            int b1[9]={0}, b2[9]={0}, b3[9]={0}, b4[9]={0}, b5[9]={0}, b6[9]={0}, b7[9]={0}, b8[9]={0}, b9[9]={0},
                r1[9]={0}, r2[9]={0}, r3[9]={0}, r4[9]={0}, r5[9]={0}, r6[9]={0}, r7[9]={0}, r8[9]={0}, r9[9]={0};
            int counter = 0, difficulty = 0, f = 0, check = 1;

            infile.open("settings.dat");
            config.open("configuration.dat");
            solution.open("solution.dat");

            if(!infile || !config || !solution)
            {
                cout << "Error! File(s) not found. Save game does not exist." << endl;
                cout << "*******************************************************************************" << endl;

                choice = 0;
            }
            else
            {
                infile >> choice >> counter >> difficulty >> f;

                config >> b1[0] >> b1[1] >> b1[2] >> b1[3] >> b1[4] >> b1[5] >> b1[6] >> b1[7] >> b1[8]
                        >> b2[0] >> b2[1] >> b2[2] >> b2[3] >> b2[4] >> b2[5] >> b2[6] >> b2[7] >> b2[8]
                        >> b3[0] >> b3[1] >> b3[2] >> b3[3] >> b3[4] >> b3[5] >> b3[6] >> b3[7] >> b3[8]
                        >> b4[0] >> b4[1] >> b4[2] >> b4[3] >> b4[4] >> b4[5] >> b4[6] >> b4[7] >> b4[8]
                        >> b5[0] >> b5[1] >> b5[2] >> b5[3] >> b5[4] >> b5[5] >> b5[6] >> b5[7] >> b5[8]
                        >> b6[0] >> b6[1] >> b6[2] >> b6[3] >> b6[4] >> b6[5] >> b6[6] >> b6[7] >> b6[8]
                        >> b7[0] >> b7[1] >> b7[2] >> b7[3] >> b7[4] >> b7[5] >> b7[6] >> b7[7] >> b7[8]
                        >> b8[0] >> b8[1] >> b8[2] >> b8[3] >> b8[4] >> b8[5] >> b8[6] >> b8[7] >> b8[8]
                        >> b9[0] >> b9[1] >> b9[2] >> b9[3] >> b9[4] >> b9[5] >> b9[6] >> b9[7] >> b9[8];

              solution >> r1[0] >> r1[1] >> r1[2] >> r1[3] >> r1[4] >> r1[5] >> r1[6] >> r1[7] >> r1[8]
                          >> r2[0] >> r2[1] >> r2[2] >> r2[3] >> r2[4] >> r2[5] >> r2[6] >> r2[7] >> r2[8]
                          >> r3[0] >> r3[1] >> r3[2] >> r3[3] >> r3[4] >> r3[5] >> r3[6] >> r3[7] >> r3[8]
                          >> r4[0] >> r4[1] >> r4[2] >> r4[3] >> r4[4] >> r4[5] >> r4[6] >> r4[7] >> r4[8]
                          >> r5[0] >> r5[1] >> r5[2] >> r5[3] >> r5[4] >> r5[5] >> r5[6] >> r5[7] >> r5[8]
                          >> r6[0] >> r6[1] >> r6[2] >> r6[3] >> r6[4] >> r6[5] >> r6[6] >> r6[7] >> r6[8]
                          >> r7[0] >> r7[1] >> r7[2] >> r7[3] >> r7[4] >> r7[5] >> r7[6] >> r7[7] >> r7[8]
                          >> r8[0] >> r8[1] >> r8[2] >> r8[3] >> r8[4] >> r8[5] >> r8[6] >> r8[7] >> r8[8]
                          >> r9[0] >> r9[1] >> r9[2] >> r9[3] >> r9[4] >> r9[5] >> r9[6] >> r9[7] >> r9[8];

                game(choice, counter, difficulty, r1, r2, r3, r4, r5, r6, r7, r8, r9, b1, b2, b3, b4, b5, b6, b7, b8, b9, f, check);

                infile.close();
                config.close();
                solution.close();
            }
        }
        else if (choice == 3)
        {
            ifstream infile;
            int g[5], k[5], l[5];

            infile.open("highscores.txt");

            if(!infile)
            {
                cout << "Error! File cannot open." << endl;
            }
            else
            {
                infile >> g[0] >> g[1] >> g[2] >> g[3] >> g[4] >>
                            k[0] >> k[1] >> k[2] >> k[3] >> k[4] >>
                              l[0] >> l[1] >> l[2] >> l[3] >> l[4];

                cout << endl;
                cout << "Easy:" << endl;
                cout << "1st - " << g[0] << endl;
                cout << "2nd - " << g[1] << endl;
                cout << "3rd - " << g[2] << endl;
                cout << "4th - " << g[3] << endl;
                cout << "5th - " << g[4] << endl;

                cout << endl;
                cout << "Medium:" << endl;
                cout << "1st - " << k[0] << endl;
                cout << "2nd - " << k[1] << endl;
                cout << "3rd - " << k[2] << endl;
                cout << "4th - " << k[3] << endl;
                cout << "5th - " << k[4] << endl;

                cout << endl;
                cout << "Hard:" << endl;
                cout << "1st - " << l[0] << endl;
                cout << "2nd - " << l[1] << endl;
                cout << "3rd - " << l[2] << endl;
                cout << "4th - " << l[3] << endl;
                cout << "5th - " << l[4] << endl;
            }

            cout << endl;
            cout << endl;

            choice = 0;
        }
        else if (choice == 4)
        {
            cout << "Exiting program." << endl;
            return 0;
        }
        else
        {
            cout << "Error! Invalid input. Enter a valid choice." << endl;
            cout << endl;
        }
    } while (choice > 4 || choice < 1);

    return 0;
}
